import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;

public class ServerFileThread extends Thread{
	private Client client;
	private MessageManager messageManager;
	private FileManager fileManager;
	private Socket fileSocket;
	private boolean running;
	
	public ServerFileThread(Socket socket) {
		super();
		this.fileSocket = socket;
		this.client = null;
		this.running = true;
		this.messageManager = null;
		this.fileManager = null;
		
		this.start();
	}
	
	public void run() {
		try {
			ObjectOutputStream oos = new ObjectOutputStream(getFileSocket().getOutputStream());
			ObjectInputStream ois  = new ObjectInputStream(getFileSocket().getInputStream());
			setMessageManager(new MessageManager(ois, oos));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		Message message = messageManager.readMessage();
		
		if(message.getType() == Message.TYPE_UPDATECLIENT) {
			setClient(message.getUpdate());
			try {
				setFileManager(new FileManager(this.fileSocket.getInputStream(), this.fileSocket.getOutputStream()));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		System.out.println(getClient().getId() + " " + getClient().getName());
		
		while(isRunning()){
			
		}
	}

	public boolean isRunning() {
		return running;
	}

	public void setRunning(boolean running) {
		this.running = running;
	}

	public Client getClient() {
		return client;
	}

	public void setClient(Client client) {
		this.client = client;
	}

	public MessageManager getMessageManager() {
		return messageManager;
	}

	public void setMessageManager(MessageManager messageManager) {
		this.messageManager = messageManager;
	}

	public Socket getFileSocket() {
		return fileSocket;
	}

	public void setFileSocket(Socket fileSocket) {
		this.fileSocket = fileSocket;
	}

	public FileManager getFileManager() {
		return fileManager;
	}

	public void setFileManager(FileManager fileManager) {
		this.fileManager = fileManager;
	}
	
	
	
	
	
	
}
